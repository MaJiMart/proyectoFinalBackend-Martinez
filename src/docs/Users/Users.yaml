paths:
  /api/users/:
    get:
      summary: List users
      tags:
        - Users
      responses:
        200:
          description: Users successfully obtained from the database
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal Server Error
    post:
      summary: Create user
      tags:
        - Users
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/requestBodies/createUser'
      responses:
        201:
          description: User successfully created from the database
          content:
            aplication/json:
              schema:
                  $ref: '#/components/requestBodies/createUser'
        400:
          description: Fields required or User already registered
        500:
          description: Internal Server Error

  /api/users/{uid}:
    get:
      summary: Allows you to obtain a user by his/her identifier
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: user identifier
          schema:
            type: string
      responses:
        200:
          description: User successfully obtained from the database
          content:
            aplication/json:
              schema:
                  $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Internal Server Error
    put:
      summary: Allows modifying a user through their id
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: user identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          aplication/json:
            schema:
              $ref: '#/components/requestBodies/updateUser'
      responses:
        200:
          description: User successfully updated
          content:
            aplication/json:
              schema:
                  $ref: '#/components/requestBodies/updateUser'
        404:
          description: User not found
        500:
          description: Internal Server Error
    delete:
      summary: Allows delete a user by his/her identifier
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: user identifier
          schema:
            type: string
      responses:
        200:
          description: User successfully deleted from the database
        404:
          description: User not found
        500:
          description: Internal Server Error

  /api/users/premium/{uid}:
    put:
      summary: Allows modifying a user role (premium or user)
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          description: user identifier
          schema:
            type: string
      responses:
        200:
          description: User role successfully changed
        404:
          description: User not found
        500:
          description: Internal Server Error

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User identifier generated by mongodb
        first_name:
          type: string
          description: User name.
        last_name:
          type: string
          description: User last name.
        email:
          type: string
          description: User email.
        age:
          type: number
          description: User age
        password:
          type: string
          description: User password.
        resetPasswordToken:
          type: string
          description: Password recovery token provided by JWT
        cart:
          type: string
          description: Cart ID
        role:
          type: string
          description: Role with which the user registers. User, Premium or Admin
        provider:
          type: string
          description: Simple description of where the user is obtained.
          
      example:
        _id: 65ba6662a84808f1a4c986ab
        first_name: Juan
        last_name: DePrueba
        email: jdp@mail.com
        age: 54
        password: 9876erf
        role: user
        provider: local
        cart: Array (empty)
  
  requestBodies:
    createUser:
      type: object
      properties:
        first_name:
          type: string
          description: User name.
        last_name:
          type: string
          description: User last name.
        email:
          type: string
          description: User email.
        password:
          type: string
          description: User password.

      example:
        first_name: Juan
        last_name: DePrueba
        email: jdp@mail.com
        password: 9876erf

    updateUser:
      type: object
      properties:
        first_name:
          type: string
          description: User name. Require
        last_name:
          type: string
          description: User last name. Require
        email:
          type: string
          description: User email. Require
        age:
          type: number
          description: User age

      example:
        first_name: Juan
        last_name: DePrueba
        email: jdp@mail.com
        age: 54
